"use client";

import VideoStreamReceiver from '@/VideoStreamReceiver';
import usePeerConnection from '@/hook/peerConnection';
import useSocketConnection from '@/hook/socketConnection';
import { Peer } from '@/types';
import Head from 'next/head';
import React from 'react';

export default function Home() {
  const [vsReceiver, setVSReceiver] = React.useState<undefined|VideoStreamReceiver>(undefined);
  const remoteVideo = React.useRef<HTMLVideoElement>(null);
  const { socket } = useSocketConnection(true)
  const peer = usePeerConnection(true)
  const [recvState, setRecvState] = React.useState<'beforeStart'|'loading'|'started'|'stopped'>('beforeStart')

  const ontrack = (peer: Peer) => (evt: RTCTrackEvent) => {
    console.info('ontrack triggered')
    if (evt.streams[0] && remoteVideo.current) {
      console.log('Stream added to video')
      console.log(evt.streams[0].getVideoTracks())
      remoteVideo.current.srcObject = evt.streams[0]
      remoteVideo.current.play().then(() => {
        setRecvState('started')
        console.log("Success to play video")
      }, (reason: any) => {
        console.log("failed to play video")
        console.log(reason)
      }).catch((reason: any) => {
        console.error("Failed to add track", reason)
        alert("Failed to add track")
      })
    }
  };

  const onNotReady = () => {
    setRecvState('beforeStart')
    alert('Can not start (stream sender is not ready)')
  }

  const onDisconnected = () => {
    setRecvState('stopped')
  }

  const onStart = () => {
    setRecvState('loading')
  }

  React.useEffect(() => {
    if (socket && peer) {
      setVSReceiver(new VideoStreamReceiver(socket, peer, ontrack, onStart, onNotReady, onDisconnected))
    }
  }, [socket, peer])

  return (
    <>
      <Head>
        <title>WebRTC remote viewer</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="relative justify-center flex items-center w-full h-full">
        <div className='absolute flex top-0 left-0 pr-5 w-full mt-5 mr-5 white z-50 justify-end'>
          <button
            className='bg-slate-200 px-4 py-2 text-gray-800 disabled:text-gray-300'
            onClick={() => {
              vsReceiver?.start()
            }}
            disabled={(() => {
              switch (recvState) {
                case 'beforeStart':
                case 'stopped':
                  return false
                case 'loading':
                case 'started':
                  return true
                default:
                  return false
              }
            })()}
          >
            {(() => {
              switch (recvState) {
                case 'beforeStart':
                  return 'Start'
                case 'loading':
                  return 'Loading...'
                case 'started':
                  return 'Started'
                case 'stopped':
                  return 'Restart'
                default:
                  return ''
              }
            })()}
          </button>
        </div>
        <video
          ref={remoteVideo}
          className='bg-gray-200 mt-32 w-[960px] h-[540px]'
          autoPlay
          muted
          playsInline
          loop
        >
        </video>
      </main>
    </>
  )
}
